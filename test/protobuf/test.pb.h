// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace rpcProto {
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class friendListReq;
class friendListReqDefaultTypeInternal;
extern friendListReqDefaultTypeInternal _friendListReq_default_instance_;
class friendListResponse;
class friendListResponseDefaultTypeInternal;
extern friendListResponseDefaultTypeInternal _friendListResponse_default_instance_;
class loginRequest;
class loginRequestDefaultTypeInternal;
extern loginRequestDefaultTypeInternal _loginRequest_default_instance_;
class loginResponse;
class loginResponseDefaultTypeInternal;
extern loginResponseDefaultTypeInternal _loginResponse_default_instance_;
class resultCode;
class resultCodeDefaultTypeInternal;
extern resultCodeDefaultTypeInternal _resultCode_default_instance_;
}  // namespace rpcProto
PROTOBUF_NAMESPACE_OPEN
template<> ::rpcProto::User* Arena::CreateMaybeMessage<::rpcProto::User>(Arena*);
template<> ::rpcProto::friendListReq* Arena::CreateMaybeMessage<::rpcProto::friendListReq>(Arena*);
template<> ::rpcProto::friendListResponse* Arena::CreateMaybeMessage<::rpcProto::friendListResponse>(Arena*);
template<> ::rpcProto::loginRequest* Arena::CreateMaybeMessage<::rpcProto::loginRequest>(Arena*);
template<> ::rpcProto::loginResponse* Arena::CreateMaybeMessage<::rpcProto::loginResponse>(Arena*);
template<> ::rpcProto::resultCode* Arena::CreateMaybeMessage<::rpcProto::resultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpcProto {

enum User_Sex : int {
  User_Sex_man = 0,
  User_Sex_woman = 1,
  User_Sex_User_Sex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  User_Sex_User_Sex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool User_Sex_IsValid(int value);
constexpr User_Sex User_Sex_Sex_MIN = User_Sex_man;
constexpr User_Sex User_Sex_Sex_MAX = User_Sex_woman;
constexpr int User_Sex_Sex_ARRAYSIZE = User_Sex_Sex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* User_Sex_descriptor();
template<typename T>
inline const std::string& User_Sex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, User_Sex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function User_Sex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    User_Sex_descriptor(), enum_t_value);
}
inline bool User_Sex_Parse(
    const std::string& name, User_Sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<User_Sex>(
    User_Sex_descriptor(), name, value);
}
// ===================================================================

class loginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcProto.loginRequest) */ {
 public:
  loginRequest();
  virtual ~loginRequest();

  loginRequest(const loginRequest& from);
  loginRequest(loginRequest&& from) noexcept
    : loginRequest() {
    *this = ::std::move(from);
  }

  inline loginRequest& operator=(const loginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline loginRequest& operator=(loginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginRequest* internal_default_instance() {
    return reinterpret_cast<const loginRequest*>(
               &_loginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(loginRequest& a, loginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(loginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loginRequest* New() const final {
    return CreateMaybeMessage<loginRequest>(nullptr);
  }

  loginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loginRequest& from);
  void MergeFrom(const loginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcProto.loginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const void* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:rpcProto.loginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class resultCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcProto.resultCode) */ {
 public:
  resultCode();
  virtual ~resultCode();

  resultCode(const resultCode& from);
  resultCode(resultCode&& from) noexcept
    : resultCode() {
    *this = ::std::move(from);
  }

  inline resultCode& operator=(const resultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline resultCode& operator=(resultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const resultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const resultCode* internal_default_instance() {
    return reinterpret_cast<const resultCode*>(
               &_resultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(resultCode& a, resultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(resultCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline resultCode* New() const final {
    return CreateMaybeMessage<resultCode>(nullptr);
  }

  resultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<resultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const resultCode& from);
  void MergeFrom(const resultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcProto.resultCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpcProto.resultCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class loginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcProto.loginResponse) */ {
 public:
  loginResponse();
  virtual ~loginResponse();

  loginResponse(const loginResponse& from);
  loginResponse(loginResponse&& from) noexcept
    : loginResponse() {
    *this = ::std::move(from);
  }

  inline loginResponse& operator=(const loginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loginResponse& operator=(loginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginResponse* internal_default_instance() {
    return reinterpret_cast<const loginResponse*>(
               &_loginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(loginResponse& a, loginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loginResponse* New() const final {
    return CreateMaybeMessage<loginResponse>(nullptr);
  }

  loginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loginResponse& from);
  void MergeFrom(const loginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcProto.loginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResMsgFieldNumber = 1,
    kSuccessFieldNumber = 3,
  };
  // .rpcProto.resultCode resMsg = 1;
  bool has_resmsg() const;
  private:
  bool _internal_has_resmsg() const;
  public:
  void clear_resmsg();
  const ::rpcProto::resultCode& resmsg() const;
  ::rpcProto::resultCode* release_resmsg();
  ::rpcProto::resultCode* mutable_resmsg();
  void set_allocated_resmsg(::rpcProto::resultCode* resmsg);
  private:
  const ::rpcProto::resultCode& _internal_resmsg() const;
  ::rpcProto::resultCode* _internal_mutable_resmsg();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rpcProto.loginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::rpcProto::resultCode* resmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcProto.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcProto.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef User_Sex Sex;
  static constexpr Sex man =
    User_Sex_man;
  static constexpr Sex woman =
    User_Sex_woman;
  static inline bool Sex_IsValid(int value) {
    return User_Sex_IsValid(value);
  }
  static constexpr Sex Sex_MIN =
    User_Sex_Sex_MIN;
  static constexpr Sex Sex_MAX =
    User_Sex_Sex_MAX;
  static constexpr int Sex_ARRAYSIZE =
    User_Sex_Sex_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Sex_descriptor() {
    return User_Sex_descriptor();
  }
  template<typename T>
  static inline const std::string& Sex_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sex>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sex_Name.");
    return User_Sex_Name(enum_t_value);
  }
  static inline bool Sex_Parse(const std::string& name,
      Sex* value) {
    return User_Sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kSexFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .rpcProto.User.Sex sex = 3;
  void clear_sex();
  ::rpcProto::User_Sex sex() const;
  void set_sex(::rpcProto::User_Sex value);
  private:
  ::rpcProto::User_Sex _internal_sex() const;
  void _internal_set_sex(::rpcProto::User_Sex value);
  public:

  // @@protoc_insertion_point(class_scope:rpcProto.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  int sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class friendListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcProto.friendListReq) */ {
 public:
  friendListReq();
  virtual ~friendListReq();

  friendListReq(const friendListReq& from);
  friendListReq(friendListReq&& from) noexcept
    : friendListReq() {
    *this = ::std::move(from);
  }

  inline friendListReq& operator=(const friendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline friendListReq& operator=(friendListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const friendListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const friendListReq* internal_default_instance() {
    return reinterpret_cast<const friendListReq*>(
               &_friendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(friendListReq& a, friendListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(friendListReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline friendListReq* New() const final {
    return CreateMaybeMessage<friendListReq>(nullptr);
  }

  friendListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<friendListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const friendListReq& from);
  void MergeFrom(const friendListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(friendListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcProto.friendListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rpcProto.friendListReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class friendListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpcProto.friendListResponse) */ {
 public:
  friendListResponse();
  virtual ~friendListResponse();

  friendListResponse(const friendListResponse& from);
  friendListResponse(friendListResponse&& from) noexcept
    : friendListResponse() {
    *this = ::std::move(from);
  }

  inline friendListResponse& operator=(const friendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline friendListResponse& operator=(friendListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const friendListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const friendListResponse* internal_default_instance() {
    return reinterpret_cast<const friendListResponse*>(
               &_friendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(friendListResponse& a, friendListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(friendListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline friendListResponse* New() const final {
    return CreateMaybeMessage<friendListResponse>(nullptr);
  }

  friendListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<friendListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const friendListResponse& from);
  void MergeFrom(const friendListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(friendListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpcProto.friendListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 2,
    kResMsgFieldNumber = 1,
  };
  // repeated .rpcProto.User friendList = 2;
  int friendlist_size() const;
  private:
  int _internal_friendlist_size() const;
  public:
  void clear_friendlist();
  ::rpcProto::User* mutable_friendlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcProto::User >*
      mutable_friendlist();
  private:
  const ::rpcProto::User& _internal_friendlist(int index) const;
  ::rpcProto::User* _internal_add_friendlist();
  public:
  const ::rpcProto::User& friendlist(int index) const;
  ::rpcProto::User* add_friendlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcProto::User >&
      friendlist() const;

  // .rpcProto.resultCode resMsg = 1;
  bool has_resmsg() const;
  private:
  bool _internal_has_resmsg() const;
  public:
  void clear_resmsg();
  const ::rpcProto::resultCode& resmsg() const;
  ::rpcProto::resultCode* release_resmsg();
  ::rpcProto::resultCode* mutable_resmsg();
  void set_allocated_resmsg(::rpcProto::resultCode* resmsg);
  private:
  const ::rpcProto::resultCode& _internal_resmsg() const;
  ::rpcProto::resultCode* _internal_mutable_resmsg();
  public:

  // @@protoc_insertion_point(class_scope:rpcProto.friendListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcProto::User > friendlist_;
  ::rpcProto::resultCode* resmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpcProto::loginRequest* request,
                       ::rpcProto::loginResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendLists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpcProto::friendListReq* request,
                       ::rpcProto::friendListResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpcProto::loginRequest* request,
                       ::rpcProto::loginResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFriendLists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rpcProto::friendListReq* request,
                       ::rpcProto::friendListResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// loginRequest

// bytes name = 1;
inline void loginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& loginRequest::name() const {
  // @@protoc_insertion_point(field_get:rpcProto.loginRequest.name)
  return _internal_name();
}
inline void loginRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:rpcProto.loginRequest.name)
}
inline std::string* loginRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:rpcProto.loginRequest.name)
  return _internal_mutable_name();
}
inline const std::string& loginRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void loginRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void loginRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcProto.loginRequest.name)
}
inline void loginRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcProto.loginRequest.name)
}
inline void loginRequest::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcProto.loginRequest.name)
}
inline std::string* loginRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* loginRequest::release_name() {
  // @@protoc_insertion_point(field_release:rpcProto.loginRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void loginRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpcProto.loginRequest.name)
}

// bytes passwd = 2;
inline void loginRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& loginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:rpcProto.loginRequest.passwd)
  return _internal_passwd();
}
inline void loginRequest::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:rpcProto.loginRequest.passwd)
}
inline std::string* loginRequest::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:rpcProto.loginRequest.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& loginRequest::_internal_passwd() const {
  return passwd_.GetNoArena();
}
inline void loginRequest::_internal_set_passwd(const std::string& value) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void loginRequest::set_passwd(std::string&& value) {
  
  passwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcProto.loginRequest.passwd)
}
inline void loginRequest::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcProto.loginRequest.passwd)
}
inline void loginRequest::set_passwd(const void* value, size_t size) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcProto.loginRequest.passwd)
}
inline std::string* loginRequest::_internal_mutable_passwd() {
  
  return passwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* loginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:rpcProto.loginRequest.passwd)
  
  return passwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void loginRequest::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:rpcProto.loginRequest.passwd)
}

// -------------------------------------------------------------------

// resultCode

// int32 errcode = 1;
inline void resultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 resultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 resultCode::errcode() const {
  // @@protoc_insertion_point(field_get:rpcProto.resultCode.errcode)
  return _internal_errcode();
}
inline void resultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void resultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:rpcProto.resultCode.errcode)
}

// bytes errmsg = 2;
inline void resultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& resultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:rpcProto.resultCode.errmsg)
  return _internal_errmsg();
}
inline void resultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:rpcProto.resultCode.errmsg)
}
inline std::string* resultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:rpcProto.resultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& resultCode::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void resultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void resultCode::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcProto.resultCode.errmsg)
}
inline void resultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcProto.resultCode.errmsg)
}
inline void resultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcProto.resultCode.errmsg)
}
inline std::string* resultCode::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* resultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:rpcProto.resultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void resultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:rpcProto.resultCode.errmsg)
}

// -------------------------------------------------------------------

// loginResponse

// .rpcProto.resultCode resMsg = 1;
inline bool loginResponse::_internal_has_resmsg() const {
  return this != internal_default_instance() && resmsg_ != nullptr;
}
inline bool loginResponse::has_resmsg() const {
  return _internal_has_resmsg();
}
inline void loginResponse::clear_resmsg() {
  if (GetArenaNoVirtual() == nullptr && resmsg_ != nullptr) {
    delete resmsg_;
  }
  resmsg_ = nullptr;
}
inline const ::rpcProto::resultCode& loginResponse::_internal_resmsg() const {
  const ::rpcProto::resultCode* p = resmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpcProto::resultCode*>(
      &::rpcProto::_resultCode_default_instance_);
}
inline const ::rpcProto::resultCode& loginResponse::resmsg() const {
  // @@protoc_insertion_point(field_get:rpcProto.loginResponse.resMsg)
  return _internal_resmsg();
}
inline ::rpcProto::resultCode* loginResponse::release_resmsg() {
  // @@protoc_insertion_point(field_release:rpcProto.loginResponse.resMsg)
  
  ::rpcProto::resultCode* temp = resmsg_;
  resmsg_ = nullptr;
  return temp;
}
inline ::rpcProto::resultCode* loginResponse::_internal_mutable_resmsg() {
  
  if (resmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpcProto::resultCode>(GetArenaNoVirtual());
    resmsg_ = p;
  }
  return resmsg_;
}
inline ::rpcProto::resultCode* loginResponse::mutable_resmsg() {
  // @@protoc_insertion_point(field_mutable:rpcProto.loginResponse.resMsg)
  return _internal_mutable_resmsg();
}
inline void loginResponse::set_allocated_resmsg(::rpcProto::resultCode* resmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resmsg_;
  }
  if (resmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resmsg, submessage_arena);
    }
    
  } else {
    
  }
  resmsg_ = resmsg;
  // @@protoc_insertion_point(field_set_allocated:rpcProto.loginResponse.resMsg)
}

// bool success = 3;
inline void loginResponse::clear_success() {
  success_ = false;
}
inline bool loginResponse::_internal_success() const {
  return success_;
}
inline bool loginResponse::success() const {
  // @@protoc_insertion_point(field_get:rpcProto.loginResponse.success)
  return _internal_success();
}
inline void loginResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void loginResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rpcProto.loginResponse.success)
}

// -------------------------------------------------------------------

// User

// bytes name = 1;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:rpcProto.User.name)
  return _internal_name();
}
inline void User::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:rpcProto.User.name)
}
inline std::string* User::mutable_name() {
  // @@protoc_insertion_point(field_mutable:rpcProto.User.name)
  return _internal_mutable_name();
}
inline const std::string& User::_internal_name() const {
  return name_.GetNoArena();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcProto.User.name)
}
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcProto.User.name)
}
inline void User::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcProto.User.name)
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:rpcProto.User.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpcProto.User.name)
}

// uint32 age = 2;
inline void User::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::age() const {
  // @@protoc_insertion_point(field_get:rpcProto.User.age)
  return _internal_age();
}
inline void User::_internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
}
inline void User::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:rpcProto.User.age)
}

// .rpcProto.User.Sex sex = 3;
inline void User::clear_sex() {
  sex_ = 0;
}
inline ::rpcProto::User_Sex User::_internal_sex() const {
  return static_cast< ::rpcProto::User_Sex >(sex_);
}
inline ::rpcProto::User_Sex User::sex() const {
  // @@protoc_insertion_point(field_get:rpcProto.User.sex)
  return _internal_sex();
}
inline void User::_internal_set_sex(::rpcProto::User_Sex value) {
  
  sex_ = value;
}
inline void User::set_sex(::rpcProto::User_Sex value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:rpcProto.User.sex)
}

// -------------------------------------------------------------------

// friendListReq

// int32 userid = 1;
inline void friendListReq::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 friendListReq::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 friendListReq::userid() const {
  // @@protoc_insertion_point(field_get:rpcProto.friendListReq.userid)
  return _internal_userid();
}
inline void friendListReq::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void friendListReq::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:rpcProto.friendListReq.userid)
}

// -------------------------------------------------------------------

// friendListResponse

// .rpcProto.resultCode resMsg = 1;
inline bool friendListResponse::_internal_has_resmsg() const {
  return this != internal_default_instance() && resmsg_ != nullptr;
}
inline bool friendListResponse::has_resmsg() const {
  return _internal_has_resmsg();
}
inline void friendListResponse::clear_resmsg() {
  if (GetArenaNoVirtual() == nullptr && resmsg_ != nullptr) {
    delete resmsg_;
  }
  resmsg_ = nullptr;
}
inline const ::rpcProto::resultCode& friendListResponse::_internal_resmsg() const {
  const ::rpcProto::resultCode* p = resmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rpcProto::resultCode*>(
      &::rpcProto::_resultCode_default_instance_);
}
inline const ::rpcProto::resultCode& friendListResponse::resmsg() const {
  // @@protoc_insertion_point(field_get:rpcProto.friendListResponse.resMsg)
  return _internal_resmsg();
}
inline ::rpcProto::resultCode* friendListResponse::release_resmsg() {
  // @@protoc_insertion_point(field_release:rpcProto.friendListResponse.resMsg)
  
  ::rpcProto::resultCode* temp = resmsg_;
  resmsg_ = nullptr;
  return temp;
}
inline ::rpcProto::resultCode* friendListResponse::_internal_mutable_resmsg() {
  
  if (resmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpcProto::resultCode>(GetArenaNoVirtual());
    resmsg_ = p;
  }
  return resmsg_;
}
inline ::rpcProto::resultCode* friendListResponse::mutable_resmsg() {
  // @@protoc_insertion_point(field_mutable:rpcProto.friendListResponse.resMsg)
  return _internal_mutable_resmsg();
}
inline void friendListResponse::set_allocated_resmsg(::rpcProto::resultCode* resmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resmsg_;
  }
  if (resmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resmsg, submessage_arena);
    }
    
  } else {
    
  }
  resmsg_ = resmsg;
  // @@protoc_insertion_point(field_set_allocated:rpcProto.friendListResponse.resMsg)
}

// repeated .rpcProto.User friendList = 2;
inline int friendListResponse::_internal_friendlist_size() const {
  return friendlist_.size();
}
inline int friendListResponse::friendlist_size() const {
  return _internal_friendlist_size();
}
inline void friendListResponse::clear_friendlist() {
  friendlist_.Clear();
}
inline ::rpcProto::User* friendListResponse::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:rpcProto.friendListResponse.friendList)
  return friendlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcProto::User >*
friendListResponse::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:rpcProto.friendListResponse.friendList)
  return &friendlist_;
}
inline const ::rpcProto::User& friendListResponse::_internal_friendlist(int index) const {
  return friendlist_.Get(index);
}
inline const ::rpcProto::User& friendListResponse::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:rpcProto.friendListResponse.friendList)
  return _internal_friendlist(index);
}
inline ::rpcProto::User* friendListResponse::_internal_add_friendlist() {
  return friendlist_.Add();
}
inline ::rpcProto::User* friendListResponse::add_friendlist() {
  // @@protoc_insertion_point(field_add:rpcProto.friendListResponse.friendList)
  return _internal_add_friendlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rpcProto::User >&
friendListResponse::friendlist() const {
  // @@protoc_insertion_point(field_list:rpcProto.friendListResponse.friendList)
  return friendlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rpcProto::User_Sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcProto::User_Sex>() {
  return ::rpcProto::User_Sex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
